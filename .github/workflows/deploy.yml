name: Build and Deploy Portfolio
env:
  CI: false
on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: '0 12 * * 1' # weekly on Mondays at 12:00 UTC

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    env:
      # Core configuration
      GITHUB_USERNAME: "samehshi"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Feature flags with validation
      USE_GITHUB_DATA: "true"
      USE_MEDIUM_DATA: "false"  # Disabled until username is confirmed
      
      # Optional integrations
      MEDIUM_USERNAME: "sameh_shi"
      
      # Build configuration
      CI: false
      NODE_ENV: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Validate Environment
        run: |
          echo "üîç Validating required environment variables..."
          if [ "$USE_GITHUB_DATA" = "true" ]; then
            if [ -z "$GITHUB_USERNAME" ]; then
              echo "‚ùå Error: GITHUB_USERNAME is required when USE_GITHUB_DATA=true"
              exit 1
            fi
            if [ -z "$GITHUB_TOKEN" ]; then
              echo "‚ùå Error: GITHUB_TOKEN is required when USE_GITHUB_DATA=true"
              exit 1
            fi
          fi
          
          if [ "$USE_MEDIUM_DATA" = "true" ]; then
            if [ -z "$MEDIUM_USERNAME" ]; then
              echo "‚ö†Ô∏è Warning: MEDIUM_USERNAME not set, Medium integration disabled"
              echo "USE_MEDIUM_DATA=false" >> $GITHUB_ENV
            fi
          fi
          
          echo "‚úÖ Environment validation complete"
          echo "üìä Configuration summary:"
          echo "  - GitHub Data: $USE_GITHUB_DATA"
          echo "  - Medium Data: $USE_MEDIUM_DATA"
          echo "  - GitHub Username: $GITHUB_USERNAME"
          echo "  - Medium Username: ${MEDIUM_USERNAME:-'Not set'}"

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci
          echo "‚úÖ Dependencies installed successfully"
          echo "üó∫Ô∏è Package audit summary:"
          npm audit --audit-level=moderate || echo "‚ö†Ô∏è Some vulnerabilities detected (non-blocking)"

      - name: Format Check (with auto-fix)
        run: |
          echo "üîç Checking code formatting..."
          if ! npm run check-format; then
            echo "‚ö†Ô∏è Format violations detected - applying auto-fixes..."
            npm run format
            echo "‚úÖ Formatting fixes applied"
            if ! npm run check-format; then
              echo "‚ùå Critical: Formatting issues persist after auto-fix"
              exit 1
            fi
          else
            echo "‚úÖ All files are properly formatted"
          fi

      - name: Health Check
        run: |
          echo "üöë Running application health checks..."
          npm run health-check || echo "‚ö†Ô∏è Health check warnings detected (non-blocking)"
          echo "‚úÖ Health check completed"

      - name: Fetch External Data
        run: |
          echo "üì• Running data fetch script with enhanced error handling..."
          if ! node fetch.js; then
            echo "‚ö†Ô∏è Data fetch encountered errors, but continuing with build..."
            echo "This may result in missing GitHub profile or Medium blog data."
          else
            echo "‚úÖ Data fetch completed successfully"
          fi
          echo "üìÇ Contents of public directory after fetch:"
          ls -la public/

      - name: Build application
        run: |
          echo "üõ†Ô∏è Building React application..."
          npm run build
          echo "‚úÖ React build completed successfully"
          echo "üìÇ Build output summary:"
          ls -la build/ | head -10
        env:
          CI: false

      - name: Verify Build Quality
        run: |
          echo "üîç Verifying build quality..."
          if [ ! -d "build" ]; then
            echo "‚ùå Error: Build directory not found"
            exit 1
          fi
          if [ ! -f "build/index.html" ]; then
            echo "‚ùå Error: index.html not found in build directory"
            exit 1
          fi
          
          # Advanced build verification
          BUILD_SIZE=$(du -sh build | cut -f1)
          JS_FILES=$(find build -name "*.js" | wc -l)
          CSS_FILES=$(find build -name "*.css" | wc -l)
          
          echo "‚úÖ Build verification passed"
          echo "üìä Build Quality Report:"
          echo "  - Build size: $BUILD_SIZE"
          echo "  - JavaScript files: $JS_FILES"
          echo "  - CSS files: $CSS_FILES"
          echo "  - Static assets: $(find build/static -type f | wc -l)"
          
          # Check for critical files
          CRITICAL_FILES=("build/static/js/main." "build/static/css/main.")
          for pattern in "${CRITICAL_FILES[@]}"; do
            if ! ls $pattern* 1> /dev/null 2>&1; then
              echo "‚ö†Ô∏è Warning: No files found matching $pattern"
            fi
          done
          
          echo "‚úÖ Build quality verification completed"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          publish_branch: gh-pages
          force_orphan: true
          commit_message: "Deploy portfolio - ${{ github.sha }}"

      - name: Verify deployment
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üìç Site will be available at: https://samehshi.github.io/portfolio"
          echo "‚è∞ Please allow 5-10 minutes for GitHub Pages to update"
          echo "üìä Deployment Summary:"
          echo "  - Commit: ${{ github.sha }}"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "  - Workflow: ${{ github.workflow }}"
          echo "  - Run ID: ${{ github.run_id }}"
